#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "portaudio.h"
#include "datatype.h"
#include "opt.h"
#include "misc.h"
#include "pa-misc.h"
#include "chansel.h"
#include "imatrix.h"
#include "fmatrix.h"
#include "chansel.h"
#include "sndfile.h"
#include "setopt.h"
#include <time.h>
#include <malloc.h>
#include <string.h>


int main(int ac, char** av)
{

  PaError err = Pa_Initialize();
  if( err != paNoError )
    return pa_prError(err, "Initialize");
  pa_showDev();



  double *y;
  doulbe *x;
  int L;
  int m;
  int n;



  Opt* op = opt_open(ac, av, av[0]);
  char* ifile = opt_char(op, "-i", NULL, "入力ファイル");
  if(!ifile) errExit("入力ファイルが指定されていません。\n");
  char* dev = opt_char(op, "-d", "default", "再生デバイス");
  int blk = opt_int(op, "-b", 64, "バッファ長");
  SF_INFO si;
  SNDFILE* fpi = sf_open(ifile, SFM_READ, &si);
  if(!fpi) errExit("入力サンドファイル オープン失敗。\n");
  si.samplerate = opt_int(op, "-r", si.samplerate, "fs");
  

  


  /*ptsにblkを代入*/
  int pts = blk;
  L = blk/2;


#ifdef PAFLOAT
  PaSampleFormat pafmt = paFloat32;
  float* ixx = fm_1D_create(blk*si.channels*2);
  float* iyy = fm_1D_create(blk*si.channels);
  float* Ly  = fm_1D_create(blk*si.channels);
#else
  PaSampleFormat pafmt = paInt32;
  int* ixx = im_1D_create(blk*si.channels * 2);
  int* iyy = im_1D_create(blk*si.channels);
  int* Ly  = fm_1D_create(blk*si.channels);
#endif

  //memsetする

  /*フィルタ*/
  double h[128];

  for(j = 0; j < 128; j++){
    if(j = 3){
      h[j] = 1.5;
    }else{
    h[j] = 0;
    }
    
  }
  


  while(1){

    pts = sf_readf_float(fpi, ixx, blk);


    for(n = 0; n < L; n++){

      for(i = 0; i < 128;  L++){

	ixx[i] += ixx[n - i] * h[i];
	Ly[i] =

    
	  }
    }

    chansel_exec(csl, (char*)ixx, (char*)iyy, pa_sampleSize(pafmt), pts);
    if((err = Pa_WriteStream(stream, iyy, pts)) != paNoError) pa_prError(err, "Write Stream");

    if(pts != blk) break;
  }

  if((err = Pa_StopStream(stream)) != paNoError) pa_prError(err, "Stop Stream");
  
  Pa_CloseStream(stream);
  Pa_Terminate();
  opt_close(op);
  sf_close(fpi);
#ifdef PAFLOAT
  fm_1D_free(ixx);
  fm_1D_free(iyy);
#else
  im_1D_free(ixx);
  im_1D_free(iyy);
#endif
  return 0;
}


  
